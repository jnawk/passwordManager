{
  "Description": "Stack for JNaWK Password Manager",
  "Resources": {
    "getPasswordDetailsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var doc = require('dynamodb-doc');",
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "}",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    lambda.invoke({",
                "        FunctionName: 'passwordManager-validateToken',",
                "        Payload: JSON.stringify(event)",
                "    }, function(err, data){",
                "        if(err) {",
                "            console.log(err);",
                "            context.fail(err);",
                "        } else {",
                "            var lambdaResponse = JSON.parse(data.Payload);",
                "            if(lambdaResponse.errorMessage) {",
                "                context.fail(lambdaResponse.errorMessage);",
                "            } else {",
                "                var newToken = lambdaResponse.token;",
                "                var systemKey = JSON.parse(lambdaResponse.systemKey.Payload);",
                "                var user = lambdaResponse.user;",
                "                var userKey = decrypt(user.sysEncryptedKey.S, systemKey);",
                "                dynamodb.getItem({",
                "                    Key: {",
                "                       'passwordId': { S: event.passwordId },",
                "                        'userName': { S: user.userName.S }",
                "                    },",
                "                    TableName: 'passwordManager-passwords'",
                "                }, function(err, data) {",
                "                    if(err) {",
                "                        context.fail(err);",
                "                    } else {",
                "                        var passwords = Array();",
                "                        context.succeed({",
                "                            token: newToken,",
                "                            description: decrypt(data.Item.description.S, userKey),",
                "                            username: decrypt(data.Item.username.S, userKey),",
                "                            password: decrypt(data.Item.password.S, userKey)",
                "                        });",
                "                    }",
                "                });",
                "            }",
                "        }",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Gets Password Details",
        "FunctionName": "passwordManager-getPasswordDetails",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 4
      }
    },
    "deletePasswordFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var doc = require('dynamodb-doc');",
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "}",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    lambda.invoke({",
                "        FunctionName: 'passwordManager-validateToken',",
                "        Payload: JSON.stringify(event)",
                "    }, function(err, data){",
                "        if(err) {",
                "            console.log(err);",
                "            context.fail(err);",
                "        } else {",
                "            var lambdaResponse = JSON.parse(data.Payload);",
                "            if(lambdaResponse.errorMessage) {",
                "                context.fail(lambdaResponse.errorMessage);",
                "            } else {",
                "                var newToken = lambdaResponse.token;",
                "                var systemKey = JSON.parse(lambdaResponse.systemKey.Payload);",
                "                var user = lambdaResponse.user;",
                "                var userKey = decrypt(user.sysEncryptedKey.S, systemKey);",
                "                dynamodb.deleteItem({",
                "                    Key: {",
                "                        'passwordId': { S: event.passwordId },",
                "                        'userName': { S: user.userName.S }",
                "                    },",
                "                    TableName: 'passwordManager-passwords'",
                "                }, function(err, data) {",
                "                    if(err) {",
                "                        context.fail(err);",
                "                    } else {",
                "                        context.succeed({",
                "                            token: newToken",
                "                        });",
                "                    }",
                "                });",
                "            }",
                "        }",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Deletes a password",
        "FunctionName": "passwordManager-deletePassword",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 3
      }
    },
    "getPasswordsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var doc = require('dynamodb-doc');",
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "}",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    lambda.invoke({",
                "        FunctionName: 'passwordManager-validateToken',",
                "        Payload: JSON.stringify(event)",
                "    }, function(err, data){",
                "        if(err) {",
                "            console.log(err);",
                "            context.fail(err);",
                "        } else {",
                "            var lambdaResponse = JSON.parse(data.Payload);",
                "            if(lambdaResponse.errorMessage) {",
                "                context.fail(lambdaResponse.errorMessage);",
                "            } else {",
                "                var newToken = lambdaResponse.token;",
                "                var systemKey = JSON.parse(lambdaResponse.systemKey.Payload);",
                "                var user = lambdaResponse.user;",
                "                var userKey = decrypt(user.sysEncryptedKey.S, systemKey);",
                "                dynamodb.query({",
                "                    KeyConditionExpression: 'userName = :str',",
                "                    ExpressionAttributeValues: { ':str': { S: lambdaResponse.user.userName.S } },",
                "                    TableName: 'passwordManager-passwords',",
                "                    IndexName: 'userName-index'",
                "                }, function(err, data) {",
                "                    if(err) {",
                "                        context.fail(err);",
                "                    } else {",
                "                        var passwords = Array();",
                "                        data.Items.forEach(function(password){",
                "                            passwords.push({",
                "                               passwordId: password.passwordId.S,",
                "                               description: decrypt(password.description.S, userKey)",
                "                            });",
                "                        });",
                "                        context.succeed({",
                "                            token: newToken,",
                "                            passwords: passwords",
                "                        });",
                "                    }",
                "                });",
                "            }",
                "        }",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Get Passwords",
        "FunctionName": "passwordManager-getPasswors",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 5
      }
    },
    "savePasswordFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var doc = require('dynamodb-doc');",
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "}",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    console.log('about to validate token');",
                "    lambda.invoke({",
                "        FunctionName: 'passwordManager-validateToken',",
                "        Payload: JSON.stringify(event)",
                "    }, function(err, data){",
                "        if(err) {",
                "            console.log(err);",
                "            context.fail(err);",
                "        } else {",
                "            var lambdaResponse = JSON.parse(data.Payload);",
                "            console.log(lambdaResponse);",
                "            if(lambdaResponse.errorMessage) {",
                "                context.fail(lambdaResponse.errorMessage);    ",
                "            } else {",
                "                var newToken = lambdaResponse.token;",
                "                var passwordId;",
                "                if('undefined' == typeof event.passwordId) {",
                "                    // new password",
                "                    var passwordHash = crypto.createHash('sha1').update(event.description).digest('base64');",
                "                    passwordId = JSON.stringify({",
                "                        hash: passwordHash,",
                "                        createDateTime: new Date().getTime() ",
                "                    });",
                "                } else {",
                "                    // existing password",
                "                    passwordId = event.passwordId;",
                "                }",
                "                var decryptedUserKey = decrypt(lambdaResponse.user.sysEncryptedKey.S, JSON.parse(lambdaResponse.systemKey.Payload));",
                "                dynamodb.updateItem({",
                "                    TableName: 'passwordManager-passwords',",
                "                    Key: { ",
                "                        passwordId : { S: passwordId }, ",
                "                        userName: { S: lambdaResponse.user.userName.S }",
                "                    },",
                "                    UpdateExpression: 'set #D = :d, #U = :u, #P = :p',",
                "                    ExpressionAttributeNames: {",
                "                        '#D': 'description',",
                "                        '#U': 'username',",
                "                        '#P': 'password'",
                "                    },",
                "                    ExpressionAttributeValues: {",
                "                        ':d': { S: encrypt(event.description, decryptedUserKey) },",
                "                        ':u': { S: encrypt(event.username, decryptedUserKey) },",
                "                        ':p': { S: encrypt(event.password, decryptedUserKey) }",
                "                    }",
                "                }, function(err, data) {",
                "                    if(err) {",
                "                        context.fail(err);",
                "                    } else {",
                "                        context.succeed({",
                "                            token: newToken,",
                "                            passwordId: passwordId ",
                "                        });",
                "                    }",
                "                });",
                "            }",
                "        }",
                "    });  ",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Save Password",
        "FunctionName": "passwordManager-savePassword",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 4
      }
    },
    "signupFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "  var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "  var buf = cipher.update(data, 'utf-8', 'base64');",
                "  buf += cipher.final('base64');",
                "  return buf;",
                "} ",
                "",
                "function decrypt(data, password) {",
                "  var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "  var buf = cipher.update(data, 'base64', 'utf-8');",
                "  buf += cipher.final('utf-8');",
                "  return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "  var username = event.username;",
                "  var password = event.password;",
                "",
                "  lambda.invoke({ FunctionName: 'passwordManager-acceptingNewMembers' }, function(err, data) {",
                "    if (err) {",
                "      context.fail(err);",
                "    } else {",
                "      var acceptingNewUsers = JSON.parse(data.Payload).S;",
                "      if('true' != acceptingNewUsers) { ",
                "        context.fail('Not accepting new users');",
                "      } else {",
                "        dynamodb.getItem({",
                "          Key: { userName: { S: username } },",
                "          TableName: 'passwordManager-users'",
                "        }, function(err, data){",
                "          if(err) {",
                "            context.fail(err);",
                "          } else {",
                "            if(null != data.Item) {",
                "              context.fail(new Error('Username ' + username + ' is already taken'));",
                "            } else {",
                "              // no user",
                "              lambda.invoke({FunctionName: 'passwordManager-getSystemKey'}, function(err, data){",
                "                if(err) {",
                "                  context.fail(err); ",
                "                } else {",
                "                  var systemKey = JSON.parse(data.Payload);",
                "                  // generate user's key, encrypt wth system key",
                "                  crypto.randomBytes(48, function(ex, buf) {",
                "                    var key = buf.toString('base64');",
                "                    var encryptedKey = encrypt(key, password);",
                "                    var encryptedUsername = encrypt(username, key);",
                "                    var sysEncryptedKey = encrypt(key, systemKey);",
                "                    user = {",
                "                      userName: { S: username },",
                "                      encryptedKey: { S: encryptedKey },",
                "                      encryptedUsername: { S: encryptedUsername },",
                "                      sysEncryptedKey: { S: sysEncryptedKey }",
                "                    };",
                "                    dynamodb.putItem({",
                "                      TableName: 'passwordManager-users',",
                "                      Item: user",
                "                    }, function(err, data){",
                "                      if(err) {",
                "                        context.fail(err);",
                "                      } else {",
                "                        var token = encrypt(JSON.stringify({",
                "                          timestamp: new Date().getTime(),",
                "                          user: username",
                "                        }), systemKey);",
                "                        context.succeed({ token: token });",
                "                      }",
                "                    });",
                "                  });",
                "                }",
                "              });",
                "            }",
                "          }",
                "        });",
                "      }",
                "    }",
                "  });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Signup",
        "FunctionName": "passwordManager-signup",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 3
      }
    },
    "validateTokenFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "} ",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    console.log(event);",
                "    lambda.invoke({FunctionName: 'passwordManager-getSystemKey'}, function(err, data){",
                "        if(err) {",
                "            context.fail(err);",
                "        } else {",
                "            var systemKey = data;",
                "            var decryptedToken = JSON.parse(decrypt(event.token, systemKey));",
                "            var oldestAcceptableToken = new Date().getTime() - (1000 * 60 * 15);",
                "            if(decryptedToken.timestamp < oldestAcceptableToken) {",
                "                context.fail(new Error('session expired'));",
                "            } else {",
                "                try {",
                "                    console.log(decryptedToken);",
                "                    var username = decryptedToken.user;",
                "                    dynamodb.getItem({",
                "                        Key: { userName: { S: username } },",
                "                        TableName: 'passwordManager-users'",
                "                    }, function(err, data) {",
                "                        if(err) {",
                "                            context.fail(err);",
                "                        } else {",
                "                            var newToken = encrypt(JSON.stringify({",
                "                                timestamp: new Date().getTime(),",
                "                                user: username",
                "                            }), systemKey);",
                "                            context.succeed({",
                "                                token: newToken,",
                "                                user: data.Item,",
                "                                systemKey: systemKey",
                "                            });",
                "                            ",
                "                        }",
                "                    });",
                "                } catch (ex) {",
                "                    console.log(ex);",
                "                    context.fail(new Error('token failure'));",
                "                }",
                "            }",
                "        }",
                "    }); ",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Validates Token",
        "FunctionName": "passwordManager-validateToken",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 4
      }
    },
    "loginFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "var lambda =   new AWS.Lambda(  {apiVersion: '2015-03-31'});",
                "function encrypt(data, password) {",
                "    var cipher = crypto.createCipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'utf-8', 'base64');",
                "    buf += cipher.final('base64');",
                "    return buf;",
                "} ",
                "",
                "function decrypt(data, password) {",
                "    var cipher = crypto.createDecipher('aes192', new Buffer(password, 'binary'));",
                "    var buf = cipher.update(data, 'base64', 'utf-8');",
                "    buf += cipher.final('utf-8');",
                "    return buf;",
                "}",
                "",
                "exports.handler = function(event, context) {",
                "    var username = event.username;",
                "    var password = event.password;",
                "    ",
                "    dynamodb.getItem({",
                "       Key: { userName: { S: username } },",
                "       TableName: 'passwordManager-users'",
                "    }, function(err, data) {",
                "        if(err) {",
                "            context.fail(err);",
                "        } else {",
                "            if(typeof data.Item == 'undefined') {",
                "                console.log('no data returned');",
                "                context.fail('Login failure');",
                "            } else {",
                "                try {",
                "                    console.log(data.Item);",
                "                    // decrypt user's encrypted key with user's password",
                "                    var decryptedUserKey = decrypt(data.Item.encryptedKey.S, password);",
                "                    ",
                "                    // decrypt encrypted username with user's key",
                "                    var decryptedUsername = decrypt(data.Item.encryptedUsername.S, decryptedUserKey);",
                "                    ",
                "                    if(username != decryptedUsername) {",
                "                        // user's password fails to decrypt user's key, ",
                "                        // or results in a key that fails to successfully decrypt encrypted username.  ",
                "                        context.fail('Login failure');",
                "                    } else {",
                "                        // user's password descrypts user's key which subsequently decrypts encyrpted username",
                "                        // password must be right.",
                "                        lambda.invoke({FunctionName: 'passwordManager-getSystemKey'}, function(err, data){",
                "                            if(err) {",
                "                                context.fail(err);",
                "                            } else {",
                "                                var systemKey = data; // passwordManager-getSystemKey returns key as bare data",
                "                               ",
                "                                var token = encrypt(JSON.stringify({",
                "                                    timestamp: new Date().getTime(),",
                "                                    user: username",
                "                                }), systemKey);",
                "                                console.log('returning token');",
                "                                context.succeed({ token: token });",
                "                            }",
                "                        });",
                "                    }",
                "                } catch (ex) {",
                "                    console.log(ex);",
                "                    context.fail('Login failure');",
                "                }",
                "            }",
                "        }",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Login",
        "FunctionName": "passwordManager-login",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 4
      }
    },
    "acceptingNewMembersFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var doc = require('dynamodb-doc');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "",
                "exports.handler = function(event, context) {",
                "     dynamodb.getItem({",
                "        Key: {",
                "            keyName: { S: 'acceptNewUsers' }",
                "        },",
                "        TableName: 'passwordManager-config'",
                "    }, function(err, data){",
                "        if(err) {",
                "            context.fail(err);",
                "        } else {",
                "            context.succeed(data.Item.value);",
                "        }  ",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Determines if Password Manager is accepting new members",
        "FunctionName": "passwordManager-acceptingNewMembers",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 1
      }
    },
    "getSystemKeyFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var crypto = require('crypto');",
                "",
                "var AWS = require('aws-sdk');",
                "var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'}); ",
                "",
                "exports.handler = function(event, context) {",
                "    console.log('getting system key');",
                "    dynamodb.getItem({ ",
                "        Key: { keyName: { S: 'systemKey' } },",
                "        TableName: 'passwordManager-config'",
                "    }, function(err, data) {",
                "        if(err) {",
                "            context.fail(err);",
                "        } else {",
                "            if(null == data.Item) {",
                "                // no system key",
                "                console.log('no system key');",
                "                crypto.randomBytes(48, function(ex, buf) {",
                "                    systemKey = buf.toString('base64');",
                "                    dynamodb.putItem({",
                "                        TableName: 'passwordManager-config',",
                "                        Item: {",
                "                            keyName: 'systemKey',",
                "                            value: systemKey",
                "                        }",
                "                    }, function(err, data){",
                "                        if(err) {",
                "                            context.fail(err);",
                "                        } else {",
                "                            context.succeed(systemKey);",
                "                        }",
                "                    });",
                "                });",
                "            } else {",
                "                context.succeed(data.Item.value.S);",
                "            }",
                "        } ",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Description": "Password Manager - Get System Key",
        "FunctionName": "passwordManager-getSystemKey",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaDynamoRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 3
      }
    },
    "LambdaDynamoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "PasswordManagerPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Resource": "*",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  }
}